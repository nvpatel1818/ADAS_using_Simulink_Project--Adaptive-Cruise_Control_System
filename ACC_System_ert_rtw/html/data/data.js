var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":true},"build":"ACC_System","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"/Users/jamesbond/Desktop/ACC_System_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: ert_main.c\n *\n * Code generated for Simulink model 'ACC_System'.\n *\n * Model version                  : 1.35\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Apr  1 00:48:55 2023\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include <stddef.h>\n#include <stdio.h>            /* This example main program uses printf/fflush */\n#include \"ACC_System.h\"                /* Model header file */\n\n/*\n * Associating rt_OneStep with a real-time clock or interrupt service routine\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\n * always associated with the base rate of the model.  Subrates are managed\n * by the base rate from inside the generated code.  Enabling/disabling\n * interrupts and floating point context switches are target specific.  This\n * example code indicates where these should take place relative to executing\n * the generated code step function.  Overrun behavior should be tailored to\n * your application needs.  This example simply sets an error status in the\n * real-time model and returns from rt_OneStep.\n */\nvoid rt_OneStep(void);\nvoid rt_OneStep(void)\n{\n  static boolean_T OverrunFlag = false;\n\n  /* Disable interrupts here */\n\n  /* Check for overrun */\n  if (OverrunFlag) {\n    rtmSetErrorStatus(ACC_System_M, \"Overrun\");\n    return;\n  }\n\n  OverrunFlag = true;\n\n  /* Save FPU context here (if necessary) */\n  /* Re-enable timer or interrupt here */\n  /* Set model inputs here */\n\n  /* Step the model */\n  ACC_System_step();\n\n  /* Get model outputs here */\n\n  /* Indicate task complete */\n  OverrunFlag = false;\n\n  /* Disable interrupts here */\n  /* Restore FPU context here (if necessary) */\n  /* Enable interrupts here */\n}\n\n/*\n * The example main function illustrates what is required by your\n * application code to initialize, execute, and terminate the generated code.\n * Attaching rt_OneStep to a real-time clock is target specific. This example\n * illustrates how you do this relative to initializing the model.\n */\nint_T main(int_T argc, const char *argv[])\n{\n  /* Unused arguments */\n  (void)(argc);\n  (void)(argv);\n\n  /* Initialize model */\n  ACC_System_initialize();\n\n  /* Attach rt_OneStep to a timer or interrupt service routine with\n   * period 0.01 seconds (base rate of the model) here.\n   * The call syntax for rt_OneStep is\n   *\n   *  rt_OneStep();\n   */\n  printf(\"Warning: The simulation will run forever. \"\n         \"Generated ERT main won't simulate model step behavior. \"\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\n  fflush((NULL));\n  while (rtmGetErrorStatus(ACC_System_M) == (NULL)) {\n    /*  Perform application tasks here */\n  }\n\n  /* Terminate model */\n  ACC_System_terminate();\n  return 0;\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"ACC_System.c","type":"source","group":"model","path":"/Users/jamesbond/Desktop/ACC_System_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: ACC_System.c\n *\n * Code generated for Simulink model 'ACC_System'.\n *\n * Model version                  : 1.35\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Apr  1 00:48:55 2023\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include \"ACC_System.h\"\n#include \"rtwtypes.h\"\n#include \"ACC_System_private.h\"\n#include <math.h>\n#include \"ACC_control_output.h\"\n\n/* Named constants for Chart: '<S1>/Control Algorithm' */\n#define ACC_IN_LeadVehicle_Not_Detected ((uint8_T)3U)\n#define ACC_System_IN_ACC_OFF_Mode     ((uint8_T)1U)\n#define ACC_System_IN_ACC_ON_Mode      ((uint8_T)2U)\n#define ACC_System_IN_ACC_STANDBY_Mode ((uint8_T)3U)\n#define ACC_System_IN_NO_ACTIVE_CHILD  ((uint8_T)0U)\n#define IN_LeadVehicle_Detected_Follow ((uint8_T)1U)\n#define IN_LeadVehicle_Detected_Resume ((uint8_T)2U)\n#define IN_LeadVehicle_Not_Detected_Res ((uint8_T)4U)\n#define IN_LeadVehicle_Speed_equal_Set_ ((uint8_T)5U)\n#define IN_LeadVehicle_Speed_lessthan_S ((uint8_T)6U)\n\n/* Block states (default storage) */\nDW_ACC_System_T ACC_System_DW;\n\n/* External outputs (root outports fed by signals with default storage) */\nExtY_ACC_System_T ACC_System_Y;\n\n/* Real-time model */\nstatic RT_MODEL_ACC_System_T ACC_System_M_;\nRT_MODEL_ACC_System_T *const ACC_System_M = &ACC_System_M_;\nreal_T rt_roundd_snf(real_T u)\n{\n  real_T y;\n  if (fabs(u) < 4.503599627370496E+15) {\n    if (u >= 0.5) {\n      y = floor(u + 0.5);\n    } else if (u > -0.5) {\n      y = u * 0.0;\n    } else {\n      y = ceil(u - 0.5);\n    }\n  } else {\n    y = u;\n  }\n\n  return y;\n}\n\n/* Model step function */\nvoid ACC_System_step(void)\n{\n  /* Sum: '<S3>/Add' incorporates:\n   *  Inport: '<Root>/CameraInput_LeadVehicle'\n   *  Inport: '<Root>/RadarInput_LeadVehicle'\n   */\n  LeadVehicle_Speed = (uint8_T)(CameraInput_LeadVehicle + RadarInput_LeadVehicle);\n\n  /* UnitDelay: '<S1>/Unit Delay' */\n  Acceleration_Mode = ACC_System_Y.Acceleration_Mode_h;\n\n  /* Sum: '<S4>/Add' incorporates:\n   *  Inport: '<Root>/CameraInput_DriveVehicle'\n   *  Inport: '<Root>/RadarInput_DriveVehicle'\n   */\n  DriveVehicle_Speed = (uint8_T)((uint8_T)(CameraInput_DriveVehicle +\n    RadarInput_DriveVehicle) + Acceleration_Mode);\n\n  /* SignalConversion: '<S4>/Signal Conversion' incorporates:\n   *  Inport: '<Root>/RadarInput_DriveVehicle'\n   */\n  LeadVehicle_Detected = RadarInput_DriveVehicle;\n\n  /* Chart: '<S1>/Control Algorithm' incorporates:\n   *  Inport: '<Root>/CruiseSwitch'\n   *  Inport: '<Root>/SetSwitch'\n   *  Inport: '<Root>/Set_Gap'\n   *  Inport: '<Root>/Set_Speed'\n   *  Inport: '<Root>/Time_Gap'\n   *  UnitDelay: '<S1>/Unit Delay'\n   */\n  if (ACC_System_DW.is_active_c3_ACC_System == 0U) {\n    ACC_System_DW.is_active_c3_ACC_System = 1U;\n    ACC_System_DW.is_c3_ACC_System = ACC_System_IN_ACC_OFF_Mode;\n    ACC_System_Y.Acceleration_Mode_h = 0U;\n  } else {\n    switch (ACC_System_DW.is_c3_ACC_System) {\n     case ACC_System_IN_ACC_OFF_Mode:\n      ACC_System_Y.Acceleration_Mode_h = 0U;\n      if (CruiseSwitch) {\n        ACC_System_DW.is_c3_ACC_System = ACC_System_IN_ACC_STANDBY_Mode;\n        ACC_System_Y.Acceleration_Mode_h = 1U;\n      }\n      break;\n\n     case ACC_System_IN_ACC_ON_Mode:\n      {\n        if (!SetSwitch) {\n          ACC_System_DW.is_ACC_ON_Mode = ACC_System_IN_NO_ACTIVE_CHILD;\n          ACC_System_DW.is_c3_ACC_System = ACC_System_IN_ACC_STANDBY_Mode;\n          ACC_System_Y.Acceleration_Mode_h = 1U;\n        } else if (!CruiseSwitch) {\n          ACC_System_DW.is_ACC_ON_Mode = ACC_System_IN_NO_ACTIVE_CHILD;\n          ACC_System_DW.is_c3_ACC_System = ACC_System_IN_ACC_OFF_Mode;\n          ACC_System_Y.Acceleration_Mode_h = 0U;\n        } else {\n          switch (ACC_System_DW.is_ACC_ON_Mode) {\n           case IN_LeadVehicle_Detected_Follow:\n            ACC_System_Y.Acceleration_Mode_h = 2U;\n            if (LeadVehicle_Detected == 0) {\n              ACC_System_DW.is_ACC_ON_Mode = ACC_IN_LeadVehicle_Not_Detected;\n              ACC_System_Y.Acceleration_Mode_h = 1U;\n            } else if (((LeadVehicle_Detected == 1) && (LeadVehicle_Speed <\n                         Set_Speed)) || (Time_Gap < Set_Gap)) {\n              ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Speed_lessthan_S;\n              ACC_System_Y.Acceleration_Mode_h = 4U;\n            }\n            break;\n\n           case IN_LeadVehicle_Detected_Resume:\n            ACC_System_Y.Acceleration_Mode_h = 3U;\n            if (LeadVehicle_Detected == 0) {\n              ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Not_Detected_Res;\n              ACC_System_Y.Acceleration_Mode_h = 1U;\n            } else if ((DriveVehicle_Speed < Set_Speed) && (LeadVehicle_Speed >\n                        DriveVehicle_Speed) && (Time_Gap >= Set_Gap)) {\n              ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Speed_equal_Set_;\n              ACC_System_Y.Acceleration_Mode_h = 5U;\n            } else if ((DriveVehicle_Speed == Set_Speed) && (LeadVehicle_Speed >=\n                        Set_Speed) && (Time_Gap >= Set_Gap)) {\n              ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Detected_Follow;\n              ACC_System_Y.Acceleration_Mode_h = 2U;\n            }\n            break;\n\n           case ACC_IN_LeadVehicle_Not_Detected:\n            ACC_System_Y.Acceleration_Mode_h = 1U;\n            if ((LeadVehicle_Detected == 1) && (DriveVehicle_Speed == Set_Speed)\n                && (LeadVehicle_Speed >= Set_Speed) && (Time_Gap >= Set_Gap)) {\n              ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Detected_Follow;\n              ACC_System_Y.Acceleration_Mode_h = 2U;\n            } else if (((LeadVehicle_Detected == 1) && (LeadVehicle_Speed <\n                         Set_Speed)) || (Time_Gap < Set_Gap)) {\n              ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Speed_lessthan_S;\n              ACC_System_Y.Acceleration_Mode_h = 4U;\n            }\n            break;\n\n           case IN_LeadVehicle_Not_Detected_Res:\n            ACC_System_Y.Acceleration_Mode_h = 1U;\n            break;\n\n           case IN_LeadVehicle_Speed_equal_Set_:\n            ACC_System_Y.Acceleration_Mode_h = 5U;\n            if (((LeadVehicle_Speed < Set_Speed) && (LeadVehicle_Speed <\n                  DriveVehicle_Speed)) || ((int32_T)rt_roundd_snf(0.75 * (real_T)\n                  Set_Gap) == Time_Gap)) {\n              ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Speed_lessthan_S;\n              ACC_System_Y.Acceleration_Mode_h = 4U;\n            } else if (((DriveVehicle_Speed < Set_Speed) && (LeadVehicle_Speed >\n              DriveVehicle_Speed)) || (Time_Gap >= Set_Gap)) {\n              ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Detected_Resume;\n              ACC_System_Y.Acceleration_Mode_h = 3U;\n            } else if ((LeadVehicle_Detected == 0) || (DriveVehicle_Speed <=\n                        Set_Speed)) {\n              ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Not_Detected_Res;\n              ACC_System_Y.Acceleration_Mode_h = 1U;\n            }\n            break;\n\n           default:\n            {\n              int32_T tmp;\n              int32_T tmp_0;\n              uint8_T tmp_1;\n              uint8_T tmp_2;\n\n              /* case IN_LeadVehicle_Speed_lessthan_Set_Speed: */\n              ACC_System_Y.Acceleration_Mode_h = 4U;\n              tmp = (int32_T)rt_roundd_snf((real_T)LeadVehicle_Speed * 1.25);\n              tmp_0 = (int32_T)rt_roundd_snf(1.25 * (real_T)Set_Gap);\n              if (tmp < 256) {\n                tmp_1 = (uint8_T)tmp;\n              } else {\n                tmp_1 = MAX_uint8_T;\n              }\n\n              if (tmp_0 < 256) {\n                tmp_2 = (uint8_T)tmp_0;\n              } else {\n                tmp_2 = MAX_uint8_T;\n              }\n\n              if ((tmp_1 >= DriveVehicle_Speed) && ((int32_T)rt_roundd_snf\n                   ((real_T)LeadVehicle_Speed * 0.75) <= DriveVehicle_Speed) &&\n                  (DriveVehicle_Speed < Set_Speed) && (Time_Gap <= tmp_2) &&\n                  (Time_Gap >= (int32_T)rt_roundd_snf(0.75 * (real_T)Set_Gap)))\n              {\n                ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Speed_equal_Set_;\n                ACC_System_Y.Acceleration_Mode_h = 5U;\n              } else if ((LeadVehicle_Detected == 0) && (DriveVehicle_Speed ==\n                          Set_Speed)) {\n                ACC_System_DW.is_ACC_ON_Mode = ACC_IN_LeadVehicle_Not_Detected;\n                ACC_System_Y.Acceleration_Mode_h = 1U;\n              }\n            }\n            break;\n          }\n        }\n      }\n      break;\n\n     default:\n      /* case IN_ACC_STANDBY_Mode: */\n      ACC_System_Y.Acceleration_Mode_h = 1U;\n      if (!CruiseSwitch) {\n        ACC_System_DW.is_c3_ACC_System = ACC_System_IN_ACC_OFF_Mode;\n        ACC_System_Y.Acceleration_Mode_h = 0U;\n      } else if (SetSwitch) {\n        ACC_System_DW.is_c3_ACC_System = ACC_System_IN_ACC_ON_Mode;\n        ACC_System_DW.is_ACC_ON_Mode = IN_LeadVehicle_Detected_Follow;\n        ACC_System_Y.Acceleration_Mode_h = 2U;\n      }\n      break;\n    }\n  }\n\n  /* End of Chart: '<S1>/Control Algorithm' */\n}\n\n/* Model initialize function */\nvoid ACC_System_initialize(void)\n{\n  /* (no initialization code required) */\n}\n\n/* Model terminate function */\nvoid ACC_System_terminate(void)\n{\n  /* (no terminate code required) */\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"ACC_System.h","type":"header","group":"model","path":"/Users/jamesbond/Desktop/ACC_System_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: ACC_System.h\n *\n * Code generated for Simulink model 'ACC_System'.\n *\n * Model version                  : 1.35\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Apr  1 00:48:55 2023\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_ACC_System_h_\n#define RTW_HEADER_ACC_System_h_\n#ifndef ACC_System_COMMON_INCLUDES_\n#define ACC_System_COMMON_INCLUDES_\n#include \"rtwtypes.h\"\n#endif                                 /* ACC_System_COMMON_INCLUDES_ */\n\n#include \"ACC_System_types.h\"\n\n/* Includes for objects with custom storage classes */\n#include \"ACC_control_output.h\"\n\n/* Macros for accessing real-time model data structure */\n#ifndef rtmGetErrorStatus\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\n#endif\n\n#ifndef rtmSetErrorStatus\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\n#endif\n\n/* Block states (default storage) for system '<Root>' */\ntypedef struct {\n  uint8_T is_active_c3_ACC_System;     /* '<S1>/Control Algorithm' */\n  uint8_T is_c3_ACC_System;            /* '<S1>/Control Algorithm' */\n  uint8_T is_ACC_ON_Mode;              /* '<S1>/Control Algorithm' */\n} DW_ACC_System_T;\n\n/* External outputs (root outports fed by signals with default storage) */\ntypedef struct {\n  uint8_T Acceleration_Mode_h;         /* '<Root>/Acceleration_Mode' */\n} ExtY_ACC_System_T;\n\n/* Real-time Model Data Structure */\nstruct tag_RTM_ACC_System_T {\n  const char_T * volatile errorStatus;\n};\n\n/* Block states (default storage) */\nextern DW_ACC_System_T ACC_System_DW;\n\n/* External outputs (root outports fed by signals with default storage) */\nextern ExtY_ACC_System_T ACC_System_Y;\n\n/* Model entry point functions */\nextern void ACC_System_initialize(void);\nextern void ACC_System_step(void);\nextern void ACC_System_terminate(void);\n\n/* Real-time Model object */\nextern RT_MODEL_ACC_System_T *const ACC_System_M;\n\n/*-\n * These blocks were eliminated from the model due to optimizations:\n *\n * Block '<Root>/Scope' : Unused code path elimination\n */\n\n/*-\n * The generated code includes comments that allow you to trace directly\n * back to the appropriate location in the model.  The basic format\n * is <system>/block_name, where system is the system number (uniquely\n * assigned by Simulink) and block_name is the name of the block.\n *\n * Use the MATLAB hilite_system command to trace the generated code back\n * to the model.  For example,\n *\n * hilite_system('<S3>')    - opens system 3\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\n *\n * Here is the system hierarchy for this model\n *\n * '<Root>' : 'ACC_System'\n * '<S1>'   : 'ACC_System/Subsystem'\n * '<S2>'   : 'ACC_System/Subsystem/Control Algorithm'\n * '<S3>'   : 'ACC_System/Subsystem/Subsystem'\n * '<S4>'   : 'ACC_System/Subsystem/Subsystem1'\n */\n#endif                                 /* RTW_HEADER_ACC_System_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"ACC_System_private.h","type":"header","group":"model","path":"/Users/jamesbond/Desktop/ACC_System_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: ACC_System_private.h\n *\n * Code generated for Simulink model 'ACC_System'.\n *\n * Model version                  : 1.35\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Apr  1 00:48:55 2023\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_ACC_System_private_h_\n#define RTW_HEADER_ACC_System_private_h_\n#include \"rtwtypes.h\"\n\n/* Imported (extern) block signals */\nextern uint8_T CameraInput_LeadVehicle;/* '<Root>/CameraInput_LeadVehicle' */\nextern uint8_T RadarInput_LeadVehicle; /* '<Root>/RadarInput_LeadVehicle' */\nextern uint8_T CameraInput_DriveVehicle;/* '<Root>/CameraInput_DriveVehicle' */\nextern uint8_T RadarInput_DriveVehicle;/* '<Root>/RadarInput_DriveVehicle' */\nextern uint8_T Time_Gap;               /* '<Root>/Time_Gap' */\nextern uint8_T Set_Speed;              /* '<Root>/Set_Speed' */\nextern boolean_T CruiseSwitch;         /* '<Root>/CruiseSwitch' */\nextern uint8_T Set_Gap;                /* '<Root>/Set_Gap' */\nextern boolean_T SetSwitch;            /* '<Root>/SetSwitch' */\nextern real_T rt_roundd_snf(real_T u);\n\n#endif                                 /* RTW_HEADER_ACC_System_private_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"ACC_System_types.h","type":"header","group":"model","path":"/Users/jamesbond/Desktop/ACC_System_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: ACC_System_types.h\n *\n * Code generated for Simulink model 'ACC_System'.\n *\n * Model version                  : 1.35\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Apr  1 00:48:55 2023\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_ACC_System_types_h_\n#define RTW_HEADER_ACC_System_types_h_\n\n/* Model Code Variants */\n\n/* Forward declaration for rtModel */\ntypedef struct tag_RTM_ACC_System_T RT_MODEL_ACC_System_T;\n\n#endif                                 /* RTW_HEADER_ACC_System_types_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"ACC_control_output.h","type":"header","group":"data","path":"/Users/jamesbond/Desktop/ACC_System_ert_rtw","tag":"","groupDisplay":"Data files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: ACC_control_output.h\n *\n * Code generated for Simulink model 'ACC_System'.\n *\n * Model version                  : 1.35\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Apr  1 00:48:55 2023\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_ACC_control_output_h_\n#define RTW_HEADER_ACC_control_output_h_\n#include \"rtwtypes.h\"\n#include \"ACC_System_types.h\"\n\n/* Exported data declaration */\n\n/* Declaration for custom storage class: ExportToFile */\nextern uint8_T Acceleration_Mode;      /* '<S1>/Unit Delay' */\nextern uint8_T DriveVehicle_Speed;     /* '<S4>/Add' */\nextern uint8_T LeadVehicle_Detected;   /* '<S4>/Signal Conversion' */\nextern uint8_T LeadVehicle_Speed;      /* '<S3>/Add' */\n\n#endif                                 /* RTW_HEADER_ACC_control_output_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"ACC_control_output_ROM.c","type":"source","group":"data","path":"/Users/jamesbond/Desktop/ACC_System_ert_rtw","tag":"","groupDisplay":"Data files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: ACC_control_output_ROM.c\n *\n * Code generated for Simulink model 'ACC_System'.\n *\n * Model version                  : 1.35\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Apr  1 00:48:55 2023\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include \"ACC_control_output.h\"\n#include \"rtwtypes.h\"\n#include \"ACC_System_types.h\"\n\n/* Exported data definition */\n\n/* Definition for custom storage class: ExportToFile */\nuint8_T Acceleration_Mode;             /* '<S1>/Unit Delay' */\nuint8_T DriveVehicle_Speed;            /* '<S4>/Add' */\nuint8_T LeadVehicle_Detected;          /* '<S4>/Signal Conversion' */\nuint8_T LeadVehicle_Speed;             /* '<S3>/Add' */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"/Users/jamesbond/Desktop/ACC_System_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: rtwtypes.h\n *\n * Code generated for Simulink model 'ACC_System'.\n *\n * Model version                  : 1.35\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Apr  1 00:48:55 2023\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n\n/* Logical type definitions */\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n\n/*=======================================================================*\n * Target hardware information\n *   Device type: Intel->x86-64 (Windows64)\n *   Number of bits:     char:   8    short:   16    int:  32\n *                       long:  32\n *                       native word size:  64\n *   Byte ordering: LittleEndian\n *   Signed integer division rounds to: Zero\n *   Shift right on a signed integer as arithmetic shift: on\n *=======================================================================*/\n\n/*=======================================================================*\n * Fixed width word size data types:                                     *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\n *=======================================================================*/\ntypedef signed char int8_T;\ntypedef unsigned char uint8_T;\ntypedef short int16_T;\ntypedef unsigned short uint16_T;\ntypedef int int32_T;\ntypedef unsigned int uint32_T;\ntypedef float real32_T;\ntypedef double real64_T;\n\n/*===========================================================================*\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\n *                           real_T, time_T, ulong_T.                        *\n *===========================================================================*/\ntypedef double real_T;\ntypedef double time_T;\ntypedef unsigned char boolean_T;\ntypedef int int_T;\ntypedef unsigned int uint_T;\ntypedef unsigned long ulong_T;\ntypedef char char_T;\ntypedef unsigned char uchar_T;\ntypedef char_T byte_T;\n\n/*===========================================================================*\n * Complex number type definitions                                           *\n *===========================================================================*/\n#define CREAL_T\n\ntypedef struct {\n  real32_T re;\n  real32_T im;\n} creal32_T;\n\ntypedef struct {\n  real64_T re;\n  real64_T im;\n} creal64_T;\n\ntypedef struct {\n  real_T re;\n  real_T im;\n} creal_T;\n\n#define CINT8_T\n\ntypedef struct {\n  int8_T re;\n  int8_T im;\n} cint8_T;\n\n#define CUINT8_T\n\ntypedef struct {\n  uint8_T re;\n  uint8_T im;\n} cuint8_T;\n\n#define CINT16_T\n\ntypedef struct {\n  int16_T re;\n  int16_T im;\n} cint16_T;\n\n#define CUINT16_T\n\ntypedef struct {\n  uint16_T re;\n  uint16_T im;\n} cuint16_T;\n\n#define CINT32_T\n\ntypedef struct {\n  int32_T re;\n  int32_T im;\n} cint32_T;\n\n#define CUINT32_T\n\ntypedef struct {\n  uint32_T re;\n  uint32_T im;\n} cuint32_T;\n\n/*=======================================================================*\n * Min and Max:                                                          *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *=======================================================================*/\n#define MAX_int8_T                     ((int8_T)(127))\n#define MIN_int8_T                     ((int8_T)(-128))\n#define MAX_uint8_T                    ((uint8_T)(255U))\n#define MAX_int16_T                    ((int16_T)(32767))\n#define MIN_int16_T                    ((int16_T)(-32768))\n#define MAX_uint16_T                   ((uint16_T)(65535U))\n#define MAX_int32_T                    ((int32_T)(2147483647))\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\n\n/* Block D-Work pointer type */\ntypedef void * pointer_T;\n\n#endif                                 /* RTWTYPES_H */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};